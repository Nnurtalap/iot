const express = require('express');
const cors = require('cors');
const http = require('http'); 
const { Server } = require("socket.io"); 

const app = express();
const PORT = 3001;

const server = http.createServer(app); 
const io = new Server(server, { 
  cors: {
    origin: [
      "http://localhost:5173", 
      "https://iotqq.netlify.app"  // <--- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
    ],
    methods: ["GET", "POST", "DELETE", "PUT"]
  }
});

app.use(cors()); 
app.use(express.json()); 

const sensorsDB = {
  'temp-living-room': { 
    name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–ì–æ—Å—Ç–∏–Ω–∞—è)', 
    unit: '¬∞C', 
    value: 21,
    min: 18, 
    max: 26, 
    alertEnabled: true 
  },
  'humidity-living-room': { 
    name: '–í–ª–∞–∂–Ω–æ—Å—Ç—å (–ì–æ—Å—Ç–∏–Ω–∞—è)', 
    unit: '%', 
    value: 45,
    min: 30,
    max: 60,
    alertEnabled: true
  },
  'temp-outside': { 
    name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–£–ª–∏—Ü–∞)', 
    unit: '¬∞C', 
    value: 7,
    min: -5,
    max: 30,
    alertEnabled: false 
  },
};

// –§—É–Ω–∫—Ü–∏—è-–°–ò–ú–£–õ–Ø–¢–û–†
function updateSensorData(sensorId) {
  const sensor = sensorsDB[sensorId];
  if (!sensor) return;
  
  let change;
  if (sensorId.includes('temp')) change = (Math.random() - 0.5) * 2;
  else change = (Math.random() - 0.5) * 5; 
  
  sensor.value = parseFloat((sensor.value + change).toFixed(2));
  
  if (sensor.value < -50) sensor.value = -50; 
  if (sensor.value > 150) sensor.value = 150;
  
  return {
    id: sensorId,
    name: sensor.name,
    value: sensor.value,
    unit: sensor.unit,
    timestamp: new Date().toISOString()
  };
}

// --- API –≠–ù–î–ü–û–ò–ù–¢–´ ---

app.get('/api/sensors', (req, res) => {
  res.json(Object.keys(sensorsDB).map(id => ({
    id: id,
    ...sensorsDB[id]
  })));
});

app.get('/api/sensors/:id/history', (req, res) => {
  const { id } = req.params;
  const { range } = req.query;
  const sensor = sensorsDB[id];
  if (!sensor) return res.status(404).json({ error: '–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  let points = 60; 
  if (range === '24h') points = 24;
  if (range === '7d') points = 7; 
  const history = [];
  for (let i = 0; i < points; i++) {
    const fakeData = updateSensorData(id);
    let timeLabel = fakeData.timestamp.split('T')[1].split('.')[0].slice(3);
    if (range === '24h') timeLabel = `–ß–∞—Å ${i+1}`;
    if (range === '7d') timeLabel = `–î–µ–Ω—å ${i+1}`;
    history.push({ time: timeLabel, value: fakeData.value });
  }
  res.json({ id: id, name: sensor.name, unit: sensor.unit, history: history });
});

app.post('/api/sensors', (req, res) => {
  const { id, name, unit } = req.body;
  if (!id || !name || !unit) return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
  if (sensorsDB[id]) return res.status(400).json({ error: '–î–∞—Ç—á–∏–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });

  const newSensor = {
    name: name,
    unit: unit,
    value: 0,
    min: 0, 
    max: 100,
    alertEnabled: false
  };
  sensorsDB[id] = newSensor;
  
  const sensorWithId = { id: id, ...newSensor };
  
  io.emit('sensor_created', sensorWithId);
  io.emit('log_event', {
    type: 'create',
    message: `‚úÖ –î–∞—Ç—á–∏–∫ "${name}" (${id}) –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.`,
    timestamp: new Date().toISOString()
  });
  
  res.status(201).json({ message: '–î–∞—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω' });
});

app.delete('/api/sensors/:id', (req, res) => {
  const { id } = req.params;
  if (sensorsDB[id]) {
    const sensorName = sensorsDB[id].name;
    delete sensorsDB[id];
    
    io.emit('sensor_deleted', id); 
    io.emit('log_event', {
      type: 'delete',
      message: `üóëÔ∏è –î–∞—Ç—á–∏–∫ "${sensorName}" (${id}) –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.`,
      timestamp: new Date().toISOString()
    });
    
    res.status(200).json({ message: '–î–∞—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω' });
  } else {
    res.status(404).json({ error: '–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

app.put('/api/sensors/:id/settings', (req, res) => {
  const { id } = req.params;
  const { min, max, alertEnabled } = req.body;
  const sensor = sensorsDB[id];
  if (!sensor) return res.status(404).json({ error: '–î–∞—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

  sensor.min = parseFloat(min);
  sensor.max = parseFloat(max);
  sensor.alertEnabled = Boolean(alertEnabled);
  
  const updatedSettings = {
    id: id,
    min: sensor.min,
    max: sensor.max,
    alertEnabled: sensor.alertEnabled
  };
  
  io.emit('sensor_settings_updated', updatedSettings);
  io.emit('log_event', {
    type: 'settings',
    message: `‚öôÔ∏è –ü–æ—Ä–æ–≥–∏ –¥–ª—è "${sensor.name}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã. (Alerts: ${alertEnabled})`,
    timestamp: new Date().toISOString()
  });
  
  res.status(200).json({ message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
});


// --- –õ–û–ì–ò–ö–ê WEBSOCKET ---
io.on('connection', (socket) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  socket.on('disconnect', () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  });
});

// --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –°–ò–ú–£–õ–Ø–¢–û–†–ê ---
setInterval(() => {
  const updates = [];
  
  for (const id in sensorsDB) {
    const sensor = sensorsDB[id];
    const update = updateSensorData(id);
    updates.push(update);
    
    // –ü–†–ê–í–î–ò–í–´–ô –õ–û–ì:
    io.emit('log_event', {
      type: 'data',
      message: `[–°–ò–ú–£–õ–Ø–¢–û–†]: "${sensor.name}" —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: ${update.value.toFixed(2)} ${sensor.unit}`,
      timestamp: new Date().toISOString()
    });

    // --- –ú–û–î–£–õ–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê (–≤–º–µ—Å—Ç–æ "AI") ---
    if (sensor.alertEnabled) {
      let anomalyFound = false;
      let alertMessage = '';

      if (update.value > sensor.max) {
        anomalyFound = true;
        alertMessage = `üö® –°–†–ê–ë–û–¢–ê–õ –ü–û–†–û–ì: –ü—Ä–µ–≤—ã—à–µ–Ω –í–ï–†–•–ù–ò–ô! –î–∞—Ç—á–∏–∫ "${sensor.name}" 
          –ø–æ–∫–∞–∑–∞–ª ${update.value} ${sensor.unit} (–ú–∞–∫—Å: ${sensor.max} ${sensor.unit}).`;
      } else if (update.value < sensor.min) {
        anomalyFound = true;
        alertMessage = `üö® –°–†–ê–ë–û–¢–ê–õ –ü–û–†–û–ì: –ü—Ä–æ–±–∏—Ç –ù–ò–ñ–ù–ò–ô! –î–∞—Ç—á–∏–∫ "${sensor.name}" 
          –ø–æ–∫–∞–∑–∞–ª ${update.value} ${sensor.unit} (–ú–∏–Ω: ${sensor.min} ${sensor.unit}).`;
      }
      
      if (anomalyFound) {
        io.emit('anomaly_alert', {
          title: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ!', // –ë–æ–ª–µ–µ "–ø—Ä–∞–≤–¥–∏–≤—ã–π" –∑–∞–≥–æ–ª–æ–≤–æ–∫
          message: alertMessage
        });
        io.emit('log_event', {
          type: 'alert',
          message: alertMessage,
          timestamp: new Date().toISOString()
        });
        
        sensor.alertEnabled = false; 
        io.emit('sensor_settings_updated', {
          id: id,
          min: sensor.min,
          max: sensor.max,
          alertEnabled: sensor.alertEnabled
        });
        // –õ–æ–≥ –æ–± –∞–≤—Ç–æ-–æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        io.emit('log_event', {
          type: 'settings',
          message: `‚öôÔ∏è –û–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è "${sensor.name}" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞).`,
          timestamp: new Date().toISOString()
        });
      }
    }
  }
  
  io.emit('sensor_updates', updates);
  
}, 2000); 

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
server.listen(PORT, () => {
  console.log(`Backend API –∏ WebSocket –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ http://localhost:${PORT}`);
});